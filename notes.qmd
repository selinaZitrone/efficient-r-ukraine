---
title: "Notes on workshop structure"
author: "Selina Baldauf"
format: html
editor: source
---

# Intro

- What is efficiency? Not just fast code but also fast to read and write
- Is R a slow programming language?
- Don't optimize everything, optimize the bottlenecks

- In the workshop
  - Learn to identify bottlenecks
  - Learn about common pitfalls and solutions
  - Learn about more efficient packages

# Profiling and Benchmarking

- measuring time with `tictoc` or `system.time()`
- profiling with `profvis`
- benchmarking with `microbenchmark`

# The basics

## Vectorization

- Vectorized functions are implemented directly in C/Fortran
- Use them if you can. Idea: The faster you get to C/Fortran, the better

## For loops - do's and don'ts

- don't grow objects in loops

## Caching variables

- If a variable does not change and is used often, cache it

# Data analysis

## Workflow

- Analysis are run multiple times
- Which parts take really long?
- Do you need to run everything all the time?
- Split scripts, store intermediate results

## Packages

- data.table
- collapse
- arrow
- tidyverse
- base R

## Reading and writing data

- Reading speed: binary > text > Excel

## Data manipulation

- collapse vs. tidyverse vs. data.table vs. base R

# Parallelization

- how many cores do you have?
- the `futureverse`
- parallel `apply` and parallel `purrr` functions
- parallel for loops with `foreach` and `doFuture`

# Rcpp

- replace slow functions with C++ code

# Memoise (?)

- caching function results

# If nothing helps

## Run somewhere else

- background jobs in R Studio
- `Rscript my_script.R`
- run on a HPC

# Memory-efficiency

- check your memory usage
  - R-Studioo memory viewer
- Choose the right data structures
  - matrix faster than data.frame -> e.g. rowSums, colMeans
  - factors instead of string
- Avoid unnecessary copies
  - Copy on modify: modifying an object creates a copy
  - Compare data.table with in-place modification with dplyr::mutate
- Efficient formats
  - `.qs`, `.parquet`
  - `arrow` and parquet allow out-of-memory access
- Remove unused objects with `rm`, `gc`


# Summary

- bring back the pyramid
- packages we looked at
- mention further references for more info




